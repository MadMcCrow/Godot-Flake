name: 'Update Flake.Lock'

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 3 * * *'

jobs:

  # update flake inputs
  update_flake:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: setup-nix
        uses: cachix/install-nix-action@v19
        with:
          extra_nix_config: ${{vars.NIX_EXTRA_CONFIG}}
          install_url: https://releases.nixos.org/nix/nix-2.12.0/install
      - name: Update the flake
        run: nix flake update
      - name: Store flake.lock
        uses: actions/upload-artifact@v3
        with:
          name: flake_lock
          path: flake.lock

 # generate JSONs for future builds and checks
  generate_matrix:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.gen_matrix.outputs.vector }}
    steps :
      - uses: actions/checkout@v3
      - name: setup-nix
        uses: cachix/install-nix-action@v19
        with:
          extra_nix_config: ${{vars.NIX_EXTRA_CONFIG}}
          install_url: https://releases.nixos.org/nix/nix-2.12.0/install
      - name: Generate flake.json
        run: |
          nix flake show --json > flake.json
      - id: gen_matrix
        run: |
          vector=$(jq -c '.packages["x86_64-linux"].default' < flake.json)
          echo "vector=$vector" >> $GITHUB_OUTPUT

  # build new flake 
  build_flake:
    runs-on: ubuntu-20.04
    needs: [generate_matrix]
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        config: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
      - name: setup-nix
        uses: cachix/install-nix-action@v19
        with:
          extra_nix_config: ${{vars.NIX_EXTRA_CONFIG}}
          install_url: https://releases.nixos.org/nix/nix-2.12.0/install
      - name: Set up cachix
        uses: cachix/cachix-action@v11
        with:
          name: godot-flake
          signingKey: "${{ secrets.CACHIX_SIGNING_KEY }}"
          pathsToPush: result
      - name: Restore flake.lock
        uses: actions/download-artifact@v3
        with:
          name: flake_lock
          path: flake.lock
      - name: Build everything
        run: |
          nix build .#${{ matrix.config }}

  # pr
  push_update:
    needs: [build_flake]
    runs-on: ubuntu-20.04
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
    - name: Restore flake.lock
      uses: actions/download-artifact@v3
      with:
        name: flake_lock
    - name: Set up git
      run: |
        git config user.email "noe.perard+git@gmail.com"
        git config user.name "Git Bot"
    - name: Create and merge PR
      run: |
          git switch -c updates-${{ github.run_id }}
          git commit -am "Automated : Flake update"
          git push -u origin updates-${{ github.run_id }}
          PR=$(gh pr create \
            --assignee MadMcCrow \
            --base main \
            --body "Automated Flake update by Github Action" \
            --fill \
            --label bot \
            --title "Auto update $(date -I)")
          gh pr merge $PR --merge --delete-branch
      env:
        GITHUB_TOKEN: ${{ github.token }}

  # clean up (do it at the end)
  del_old_runs:
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{github.repository}}
          keep_minimum_runs: 3
          retain_days: 1 # delete all but the latest, only keeping count